/**
 * This file was auto-generated by codegen/scripts/apply.rb
 * Generated apply 1 - 20
 */

package puddle.codegen.apply

import scala.language.implicitConversions
import puddle.handling._


// =====| 1 |=====

// Types

class Apply1[V1, O](
  f: ??[V1 => O]) {
  def <* (v: ??[V1]): ??[O] =
    for {
      uf <- f
      uv <- v
    } yield uf(uv)

  def <** (v: => V1): ??[O] =
    this <* handleAll(v)

}

class Apply1_??[V1, O](
  f: ??[V1 => ??[O]]) {
  def <<* (v: ??[V1]): ??[O] =
    for {
      uf <- f
      uv <- v
      res <- uf(uv)
    } yield res

  def <<** (v: => V1): ??[O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply1[V1, O](f: V1 => O): Apply1[V1, O] =
  Apply1[V1, O](f)

implicit def convertApply1_??[V1, O](f: V1 => ??[O]): Apply1_??[V1, O] =
  Apply1_??[V1, O](f)


// =====| 2 |=====

// Types

class Apply2[V1, V2, O](
  f: ??[(V1, V2) => O]) {
  def <* (v: ??[V1]): Apply1[V2, O] =
    Apply1[V2, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _)
    )

  def <** (v: => V1): Apply1[V2, O] =
    this <* handleAll(v)

}

class Apply2_??[V1, V2, O](
  f: ??[(V1, V2) => ??[O]]) {
  def <<* (v: ??[V1]): Apply1_??[V2, O] =
    Apply1_??[V2, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _)
    )

  def <<** (v: => V1): Apply1_??[V2, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply2[V1, V2, O](f: (V1, V2) => O): Apply2[V1, V2, O] =
  Apply2[V1, V2, O](f)

implicit def convertApply2_??[V1, V2, O](f: (V1, V2) => ??[O]): Apply2_??[V1, V2, O] =
  Apply2_??[V1, V2, O](f)


// =====| 3 |=====

// Types

class Apply3[V1, V2, V3, O](
  f: ??[(V1, V2, V3) => O]) {
  def <* (v: ??[V1]): Apply2[V2, V3, O] =
    Apply2[V2, V3, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _)
    )

  def <** (v: => V1): Apply2[V2, V3, O] =
    this <* handleAll(v)

}

class Apply3_??[V1, V2, V3, O](
  f: ??[(V1, V2, V3) => ??[O]]) {
  def <<* (v: ??[V1]): Apply2_??[V2, V3, O] =
    Apply2_??[V2, V3, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _)
    )

  def <<** (v: => V1): Apply2_??[V2, V3, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply3[V1, V2, V3, O](f: (V1, V2, V3) => O): Apply3[V1, V2, V3, O] =
  Apply3[V1, V2, V3, O](f)

implicit def convertApply3_??[V1, V2, V3, O](f: (V1, V2, V3) => ??[O]): Apply3_??[V1, V2, V3, O] =
  Apply3_??[V1, V2, V3, O](f)


// =====| 4 |=====

// Types

class Apply4[V1, V2, V3, V4, O](
  f: ??[(V1, V2, V3, V4) => O]) {
  def <* (v: ??[V1]): Apply3[V2, V3, V4, O] =
    Apply3[V2, V3, V4, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _)
    )

  def <** (v: => V1): Apply3[V2, V3, V4, O] =
    this <* handleAll(v)

}

class Apply4_??[V1, V2, V3, V4, O](
  f: ??[(V1, V2, V3, V4) => ??[O]]) {
  def <<* (v: ??[V1]): Apply3_??[V2, V3, V4, O] =
    Apply3_??[V2, V3, V4, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _)
    )

  def <<** (v: => V1): Apply3_??[V2, V3, V4, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply4[V1, V2, V3, V4, O](f: (V1, V2, V3, V4) => O): Apply4[V1, V2, V3, V4, O] =
  Apply4[V1, V2, V3, V4, O](f)

implicit def convertApply4_??[V1, V2, V3, V4, O](f: (V1, V2, V3, V4) => ??[O]): Apply4_??[V1, V2, V3, V4, O] =
  Apply4_??[V1, V2, V3, V4, O](f)


// =====| 5 |=====

// Types

class Apply5[V1, V2, V3, V4, V5, O](
  f: ??[(V1, V2, V3, V4, V5) => O]) {
  def <* (v: ??[V1]): Apply4[V2, V3, V4, V5, O] =
    Apply4[V2, V3, V4, V5, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _)
    )

  def <** (v: => V1): Apply4[V2, V3, V4, V5, O] =
    this <* handleAll(v)

}

class Apply5_??[V1, V2, V3, V4, V5, O](
  f: ??[(V1, V2, V3, V4, V5) => ??[O]]) {
  def <<* (v: ??[V1]): Apply4_??[V2, V3, V4, V5, O] =
    Apply4_??[V2, V3, V4, V5, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _)
    )

  def <<** (v: => V1): Apply4_??[V2, V3, V4, V5, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply5[V1, V2, V3, V4, V5, O](f: (V1, V2, V3, V4, V5) => O): Apply5[V1, V2, V3, V4, V5, O] =
  Apply5[V1, V2, V3, V4, V5, O](f)

implicit def convertApply5_??[V1, V2, V3, V4, V5, O](f: (V1, V2, V3, V4, V5) => ??[O]): Apply5_??[V1, V2, V3, V4, V5, O] =
  Apply5_??[V1, V2, V3, V4, V5, O](f)


// =====| 6 |=====

// Types

class Apply6[V1, V2, V3, V4, V5, V6, O](
  f: ??[(V1, V2, V3, V4, V5, V6) => O]) {
  def <* (v: ??[V1]): Apply5[V2, V3, V4, V5, V6, O] =
    Apply5[V2, V3, V4, V5, V6, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _)
    )

  def <** (v: => V1): Apply5[V2, V3, V4, V5, V6, O] =
    this <* handleAll(v)

}

class Apply6_??[V1, V2, V3, V4, V5, V6, O](
  f: ??[(V1, V2, V3, V4, V5, V6) => ??[O]]) {
  def <<* (v: ??[V1]): Apply5_??[V2, V3, V4, V5, V6, O] =
    Apply5_??[V2, V3, V4, V5, V6, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply5_??[V2, V3, V4, V5, V6, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply6[V1, V2, V3, V4, V5, V6, O](f: (V1, V2, V3, V4, V5, V6) => O): Apply6[V1, V2, V3, V4, V5, V6, O] =
  Apply6[V1, V2, V3, V4, V5, V6, O](f)

implicit def convertApply6_??[V1, V2, V3, V4, V5, V6, O](f: (V1, V2, V3, V4, V5, V6) => ??[O]): Apply6_??[V1, V2, V3, V4, V5, V6, O] =
  Apply6_??[V1, V2, V3, V4, V5, V6, O](f)


// =====| 7 |=====

// Types

class Apply7[V1, V2, V3, V4, V5, V6, V7, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7) => O]) {
  def <* (v: ??[V1]): Apply6[V2, V3, V4, V5, V6, V7, O] =
    Apply6[V2, V3, V4, V5, V6, V7, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply6[V2, V3, V4, V5, V6, V7, O] =
    this <* handleAll(v)

}

class Apply7_??[V1, V2, V3, V4, V5, V6, V7, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7) => ??[O]]) {
  def <<* (v: ??[V1]): Apply6_??[V2, V3, V4, V5, V6, V7, O] =
    Apply6_??[V2, V3, V4, V5, V6, V7, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply6_??[V2, V3, V4, V5, V6, V7, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply7[V1, V2, V3, V4, V5, V6, V7, O](f: (V1, V2, V3, V4, V5, V6, V7) => O): Apply7[V1, V2, V3, V4, V5, V6, V7, O] =
  Apply7[V1, V2, V3, V4, V5, V6, V7, O](f)

implicit def convertApply7_??[V1, V2, V3, V4, V5, V6, V7, O](f: (V1, V2, V3, V4, V5, V6, V7) => ??[O]): Apply7_??[V1, V2, V3, V4, V5, V6, V7, O] =
  Apply7_??[V1, V2, V3, V4, V5, V6, V7, O](f)


// =====| 8 |=====

// Types

class Apply8[V1, V2, V3, V4, V5, V6, V7, V8, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8) => O]) {
  def <* (v: ??[V1]): Apply7[V2, V3, V4, V5, V6, V7, V8, O] =
    Apply7[V2, V3, V4, V5, V6, V7, V8, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply7[V2, V3, V4, V5, V6, V7, V8, O] =
    this <* handleAll(v)

}

class Apply8_??[V1, V2, V3, V4, V5, V6, V7, V8, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8) => ??[O]]) {
  def <<* (v: ??[V1]): Apply7_??[V2, V3, V4, V5, V6, V7, V8, O] =
    Apply7_??[V2, V3, V4, V5, V6, V7, V8, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply7_??[V2, V3, V4, V5, V6, V7, V8, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply8[V1, V2, V3, V4, V5, V6, V7, V8, O](f: (V1, V2, V3, V4, V5, V6, V7, V8) => O): Apply8[V1, V2, V3, V4, V5, V6, V7, V8, O] =
  Apply8[V1, V2, V3, V4, V5, V6, V7, V8, O](f)

implicit def convertApply8_??[V1, V2, V3, V4, V5, V6, V7, V8, O](f: (V1, V2, V3, V4, V5, V6, V7, V8) => ??[O]): Apply8_??[V1, V2, V3, V4, V5, V6, V7, V8, O] =
  Apply8_??[V1, V2, V3, V4, V5, V6, V7, V8, O](f)


// =====| 9 |=====

// Types

class Apply9[V1, V2, V3, V4, V5, V6, V7, V8, V9, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9) => O]) {
  def <* (v: ??[V1]): Apply8[V2, V3, V4, V5, V6, V7, V8, V9, O] =
    Apply8[V2, V3, V4, V5, V6, V7, V8, V9, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply8[V2, V3, V4, V5, V6, V7, V8, V9, O] =
    this <* handleAll(v)

}

class Apply9_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9) => ??[O]]) {
  def <<* (v: ??[V1]): Apply8_??[V2, V3, V4, V5, V6, V7, V8, V9, O] =
    Apply8_??[V2, V3, V4, V5, V6, V7, V8, V9, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply8_??[V2, V3, V4, V5, V6, V7, V8, V9, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply9[V1, V2, V3, V4, V5, V6, V7, V8, V9, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9) => O): Apply9[V1, V2, V3, V4, V5, V6, V7, V8, V9, O] =
  Apply9[V1, V2, V3, V4, V5, V6, V7, V8, V9, O](f)

implicit def convertApply9_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9) => ??[O]): Apply9_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, O] =
  Apply9_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, O](f)


// =====| 10 |=====

// Types

class Apply10[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) => O]) {
  def <* (v: ??[V1]): Apply9[V2, V3, V4, V5, V6, V7, V8, V9, V10, O] =
    Apply9[V2, V3, V4, V5, V6, V7, V8, V9, V10, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply9[V2, V3, V4, V5, V6, V7, V8, V9, V10, O] =
    this <* handleAll(v)

}

class Apply10_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) => ??[O]]) {
  def <<* (v: ??[V1]): Apply9_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, O] =
    Apply9_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply9_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply10[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) => O): Apply10[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O] =
  Apply10[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O](f)

implicit def convertApply10_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) => ??[O]): Apply10_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O] =
  Apply10_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, O](f)


// =====| 11 |=====

// Types

class Apply11[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) => O]) {
  def <* (v: ??[V1]): Apply10[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O] =
    Apply10[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply10[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O] =
    this <* handleAll(v)

}

class Apply11_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) => ??[O]]) {
  def <<* (v: ??[V1]): Apply10_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O] =
    Apply10_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply10_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply11[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) => O): Apply11[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O] =
  Apply11[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](f)

implicit def convertApply11_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) => ??[O]): Apply11_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O] =
  Apply11_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, O](f)


// =====| 12 |=====

// Types

class Apply12[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) => O]) {
  def <* (v: ??[V1]): Apply11[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O] =
    Apply11[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply11[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O] =
    this <* handleAll(v)

}

class Apply12_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) => ??[O]]) {
  def <<* (v: ??[V1]): Apply11_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O] =
    Apply11_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply11_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply12[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) => O): Apply12[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O] =
  Apply12[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](f)

implicit def convertApply12_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) => ??[O]): Apply12_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O] =
  Apply12_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, O](f)


// =====| 13 |=====

// Types

class Apply13[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) => O]) {
  def <* (v: ??[V1]): Apply12[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O] =
    Apply12[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply12[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O] =
    this <* handleAll(v)

}

class Apply13_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) => ??[O]]) {
  def <<* (v: ??[V1]): Apply12_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O] =
    Apply12_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply12_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply13[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) => O): Apply13[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O] =
  Apply13[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](f)

implicit def convertApply13_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) => ??[O]): Apply13_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O] =
  Apply13_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, O](f)


// =====| 14 |=====

// Types

class Apply14[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) => O]) {
  def <* (v: ??[V1]): Apply13[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O] =
    Apply13[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply13[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O] =
    this <* handleAll(v)

}

class Apply14_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) => ??[O]]) {
  def <<* (v: ??[V1]): Apply13_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O] =
    Apply13_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply13_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply14[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) => O): Apply14[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O] =
  Apply14[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](f)

implicit def convertApply14_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) => ??[O]): Apply14_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O] =
  Apply14_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, O](f)


// =====| 15 |=====

// Types

class Apply15[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) => O]) {
  def <* (v: ??[V1]): Apply14[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O] =
    Apply14[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply14[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O] =
    this <* handleAll(v)

}

class Apply15_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) => ??[O]]) {
  def <<* (v: ??[V1]): Apply14_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O] =
    Apply14_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply14_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply15[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) => O): Apply15[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O] =
  Apply15[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](f)

implicit def convertApply15_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) => ??[O]): Apply15_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O] =
  Apply15_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, O](f)


// =====| 16 |=====

// Types

class Apply16[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) => O]) {
  def <* (v: ??[V1]): Apply15[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O] =
    Apply15[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply15[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O] =
    this <* handleAll(v)

}

class Apply16_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) => ??[O]]) {
  def <<* (v: ??[V1]): Apply15_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O] =
    Apply15_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply15_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply16[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) => O): Apply16[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O] =
  Apply16[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](f)

implicit def convertApply16_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) => ??[O]): Apply16_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O] =
  Apply16_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, O](f)


// =====| 17 |=====

// Types

class Apply17[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) => O]) {
  def <* (v: ??[V1]): Apply16[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O] =
    Apply16[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply16[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O] =
    this <* handleAll(v)

}

class Apply17_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) => ??[O]]) {
  def <<* (v: ??[V1]): Apply16_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O] =
    Apply16_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply16_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply17[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) => O): Apply17[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O] =
  Apply17[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](f)

implicit def convertApply17_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) => ??[O]): Apply17_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O] =
  Apply17_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, O](f)


// =====| 18 |=====

// Types

class Apply18[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) => O]) {
  def <* (v: ??[V1]): Apply17[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O] =
    Apply17[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply17[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O] =
    this <* handleAll(v)

}

class Apply18_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) => ??[O]]) {
  def <<* (v: ??[V1]): Apply17_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O] =
    Apply17_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply17_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply18[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) => O): Apply18[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O] =
  Apply18[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](f)

implicit def convertApply18_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) => ??[O]): Apply18_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O] =
  Apply18_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, O](f)


// =====| 19 |=====

// Types

class Apply19[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) => O]) {
  def <* (v: ??[V1]): Apply18[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O] =
    Apply18[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply18[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O] =
    this <* handleAll(v)

}

class Apply19_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) => ??[O]]) {
  def <<* (v: ??[V1]): Apply18_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O] =
    Apply18_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply18_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply19[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) => O): Apply19[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O] =
  Apply19[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](f)

implicit def convertApply19_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) => ??[O]): Apply19_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O] =
  Apply19_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, O](f)


// =====| 20 |=====

// Types

class Apply20[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) => O]) {
  def <* (v: ??[V1]): Apply19[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O] =
    Apply19[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <** (v: => V1): Apply19[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O] =
    this <* handleAll(v)

}

class Apply20_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](
  f: ??[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) => ??[O]]) {
  def <<* (v: ??[V1]): Apply19_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O] =
    Apply19_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)
    )

  def <<** (v: => V1): Apply19_??[V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O] =
    this <<* handleAll(v)

}

// Conversions

implicit def convertApply20[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) => O): Apply20[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O] =
  Apply20[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](f)

implicit def convertApply20_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](f: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) => ??[O]): Apply20_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O] =
  Apply20_??[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, O](f)

