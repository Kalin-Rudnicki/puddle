/**
 * This file was auto-generated by codegen/scripts/apply.rb
 * Generated apply 1 - <%= max %>
 */

package <%= apply_package %>

import scala.language.implicitConversions
import puddle.handling._

% 1.upto(max) do |idx|
% my_generics = Utils.exp(idx, "V")
% my_fs = Utils.fs(idx, "V")

// =====| <%= idx %> |=====

// Types

class Apply<%= idx %>[<%= my_generics %>, O](
  f: ??[<%= my_fs %> => O]) {
% if idx == 1
  def <* (v: ??[V1]): ??[O] =
    for {
      uf <- f
      uv <- v
    } yield uf(uv)

  def <** (v: => V1): ??[O] =
    this <* handleAll(v)
% else
% next_generics = Utils.exp(idx, "V", num_start: 2)
  def <* (v: ??[V1]): Apply<%= idx - 1 %>[<%= next_generics %>, O] =
    Apply<%= idx - 1 %>[<%= next_generics %>, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, <%= Utils.rp(idx - 1, "_") %>)
    )

  def <** (v: => V1): Apply<%= idx - 1 %>[<%= next_generics %>, O] =
    this <* handleAll(v)
% end

}

class Apply<%= idx %>_??[<%= my_generics %>, O](
  f: ??[<%= my_fs %> => ??[O]]) {
% if idx == 1
  def <<* (v: ??[V1]): ??[O] =
    for {
      uf <- f
      uv <- v
      res <- uf(uv)
    } yield res

  def <<** (v: => V1): ??[O] =
    this <<* handleAll(v)
% else
% next_generics = Utils.exp(idx, "V", num_start: 2)
  def <<* (v: ??[V1]): Apply<%= idx - 1 %>_??[<%= next_generics %>, O] =
    Apply<%= idx - 1 %>_??[<%= next_generics %>, O](
      for {
        uf <- f
        uv <- v
      } yield uf(uv, <%= Utils.rp(idx - 1, "_") %>)
    )

  def <<** (v: => V1): Apply<%= idx - 1 %>_??[<%= next_generics %>, O] =
    this <<* handleAll(v)
% end

}

// Conversions

implicit def convertApply<%= idx %>[<%= my_generics %>, O](f: <%= my_fs %> => O): Apply<%= idx %>[<%= my_generics %>, O] =
  Apply<%= idx %>[<%= my_generics %>, O](f)

implicit def convertApply<%= idx %>_??[<%= my_generics %>, O](f: <%= my_fs %> => ??[O]): Apply<%= idx %>_??[<%= my_generics %>, O] =
  Apply<%= idx %>_??[<%= my_generics %>, O](f)

% end